// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  cfHandle      String?
  fullName      String?
  accounts      Account[]
  sessions      Session[]
  submissions   Submission[] // Establishing a one-to-many relationship with Submission
  contests      Contest[]    @relation("ContestParticipants")
  followedBy    User[]       @relation("UserFollows")
  following     User[]       @relation("UserFollows")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Problem {
  id          String @id @default(cuid())
  contestId   Int
  index       String
  name        String
  solvedCount Int    @default(0)
  tags        Tag[] // Establishing a one-to-many relationship with Tag
  rating      Int    @default(0)

  time_limit           String?
  memory_limit         String?
  problem_statement    String? @db.LongText
  input_specification  String? @db.LongText
  output_specification String? @db.LongText

  sample_tests String?      @db.LongText
  note         String?      @db.LongText
  submission   Submission[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  problemId String? // This field represents the foreign key
  problem   Problem? @relation(fields: [problemId], references: [id])
}

model Contest {
  id           String       @id @default(cuid())
  name         String?
  startTime    DateTime?
  endTime      DateTime?
  // problems    Problem[]
  participants User[]       @relation("ContestParticipants")
  submissions  Submission[]
  createdAt    DateTime     @default(now())
}

model Submission {
  id          String   @id @default(cuid())
  remoteRunId String?
  problemId   String
  userId      String
  contestId   String
  verdict     String?
  language    String?
  createdAt   DateTime @default(now())
  sourceCode  String   @db.LongText
  time        Int?
  memory      Int?
  problem     Problem  @relation(fields: [problemId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  contest     Contest  @relation(fields: [contestId], references: [id])
}
